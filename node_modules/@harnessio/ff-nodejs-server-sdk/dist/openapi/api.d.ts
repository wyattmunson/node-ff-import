/**
 * Harness feature flag service client apis
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cf@harness.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AuthenticationRequest
 */
export interface AuthenticationRequest {
    /**
     *
     * @type {string}
     * @memberof AuthenticationRequest
     */
    apiKey: string;
    /**
     *
     * @type {AuthenticationRequestTarget}
     * @memberof AuthenticationRequest
     */
    target?: AuthenticationRequestTarget;
}
/**
 *
 * @export
 * @interface AuthenticationRequestTarget
 */
export interface AuthenticationRequestTarget {
    /**
     *
     * @type {string}
     * @memberof AuthenticationRequestTarget
     */
    identifier: string;
    /**
     *
     * @type {string}
     * @memberof AuthenticationRequestTarget
     */
    name?: string;
    /**
     *
     * @type {boolean}
     * @memberof AuthenticationRequestTarget
     */
    anonymous?: boolean;
    /**
     *
     * @type {object}
     * @memberof AuthenticationRequestTarget
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface AuthenticationResponse
 */
export interface AuthenticationResponse {
    /**
     *
     * @type {string}
     * @memberof AuthenticationResponse
     */
    authToken: string;
}
/**
 *
 * @export
 * @interface Clause
 */
export interface Clause {
    /**
     *
     * @type {string}
     * @memberof Clause
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Clause
     */
    attribute: string;
    /**
     *
     * @type {string}
     * @memberof Clause
     */
    op: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Clause
     */
    values: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof Clause
     */
    negate: boolean;
}
/**
 *
 * @export
 * @interface Distribution
 */
export interface Distribution {
    /**
     *
     * @type {string}
     * @memberof Distribution
     */
    bucketBy: string;
    /**
     *
     * @type {Array<WeightedVariation>}
     * @memberof Distribution
     */
    variations: Array<WeightedVariation>;
}
/**
 *
 * @export
 * @interface Evaluation
 */
export interface Evaluation {
    /**
     *
     * @type {string}
     * @memberof Evaluation
     */
    flag: string;
    /**
     *
     * @type {string}
     * @memberof Evaluation
     */
    value: string;
    /**
     *
     * @type {string}
     * @memberof Evaluation
     */
    kind: string;
    /**
     *
     * @type {string}
     * @memberof Evaluation
     */
    identifier?: string;
}
/**
 *
 * @export
 * @interface FeatureConfig
 */
export interface FeatureConfig {
    /**
     *
     * @type {string}
     * @memberof FeatureConfig
     */
    project: string;
    /**
     *
     * @type {string}
     * @memberof FeatureConfig
     */
    environment: string;
    /**
     *
     * @type {string}
     * @memberof FeatureConfig
     */
    feature: string;
    /**
     *
     * @type {FeatureState}
     * @memberof FeatureConfig
     */
    state: FeatureState;
    /**
     *
     * @type {string}
     * @memberof FeatureConfig
     */
    kind: FeatureConfigKindEnum;
    /**
     *
     * @type {Array<Variation>}
     * @memberof FeatureConfig
     */
    variations: Array<Variation>;
    /**
     *
     * @type {Array<ServingRule>}
     * @memberof FeatureConfig
     */
    rules?: Array<ServingRule>;
    /**
     *
     * @type {Serve}
     * @memberof FeatureConfig
     */
    defaultServe: Serve;
    /**
     *
     * @type {string}
     * @memberof FeatureConfig
     */
    offVariation: string;
    /**
     *
     * @type {Array<Prerequisite>}
     * @memberof FeatureConfig
     */
    prerequisites?: Array<Prerequisite>;
    /**
     *
     * @type {Array<VariationMap>}
     * @memberof FeatureConfig
     */
    variationToTargetMap?: Array<VariationMap>;
    /**
     *
     * @type {number}
     * @memberof FeatureConfig
     */
    version?: number;
}
/**
    * @export
    * @enum {string}
    */
export declare enum FeatureConfigKindEnum {
    Boolean = "boolean",
    Int = "int",
    String = "string",
    Json = "json"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum FeatureState {
    On = "on",
    Off = "off"
}
/**
 *
 * @export
 * @interface KeyValue
 */
export interface KeyValue {
    /**
     *
     * @type {string}
     * @memberof KeyValue
     */
    key: string;
    /**
     *
     * @type {string}
     * @memberof KeyValue
     */
    value: string;
}
/**
 *
 * @export
 * @interface Metrics
 */
export interface Metrics {
    /**
     *
     * @type {Array<TargetData>}
     * @memberof Metrics
     */
    targetData?: Array<TargetData>;
    /**
     *
     * @type {Array<MetricsData>}
     * @memberof Metrics
     */
    metricsData?: Array<MetricsData>;
}
/**
 *
 * @export
 * @interface MetricsData
 */
export interface MetricsData {
    /**
     * time at when this data was recorded
     * @type {number}
     * @memberof MetricsData
     */
    timestamp: number;
    /**
     *
     * @type {number}
     * @memberof MetricsData
     */
    count: number;
    /**
     * This can be of type FeatureMetrics
     * @type {string}
     * @memberof MetricsData
     */
    metricsType: MetricsDataMetricsTypeEnum;
    /**
     *
     * @type {Array<KeyValue>}
     * @memberof MetricsData
     */
    attributes: Array<KeyValue>;
}
/**
    * @export
    * @enum {string}
    */
export declare enum MetricsDataMetricsTypeEnum {
    Ffmetrics = "FFMETRICS"
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    message: string;
}
/**
 *
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     *
     * @type {number}
     * @memberof Pagination
     */
    version?: number;
    /**
     *
     * @type {number}
     * @memberof Pagination
     */
    pageCount: number;
    /**
     *
     * @type {number}
     * @memberof Pagination
     */
    itemCount: number;
    /**
     *
     * @type {number}
     * @memberof Pagination
     */
    pageSize: number;
    /**
     *
     * @type {number}
     * @memberof Pagination
     */
    pageIndex: number;
}
/**
 *
 * @export
 * @interface Prerequisite
 */
export interface Prerequisite {
    /**
     *
     * @type {string}
     * @memberof Prerequisite
     */
    feature: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Prerequisite
     */
    variations: Array<string>;
}
/**
 *
 * @export
 * @interface Segment
 */
export interface Segment {
    /**
     * Unique identifier for the segment.
     * @type {string}
     * @memberof Segment
     */
    identifier: string;
    /**
     * Name of the segment.
     * @type {string}
     * @memberof Segment
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof Segment
     */
    environment?: string;
    /**
     *
     * @type {Array<Tag>}
     * @memberof Segment
     */
    tags?: Array<Tag>;
    /**
     *
     * @type {Array<Target>}
     * @memberof Segment
     */
    included?: Array<Target>;
    /**
     *
     * @type {Array<Target>}
     * @memberof Segment
     */
    excluded?: Array<Target>;
    /**
     * An array of rules that can cause a user to be included in this segment.
     * @type {Array<Clause>}
     * @memberof Segment
     */
    rules?: Array<Clause>;
    /**
     *
     * @type {number}
     * @memberof Segment
     */
    createdAt?: number;
    /**
     *
     * @type {number}
     * @memberof Segment
     */
    modifiedAt?: number;
    /**
     *
     * @type {number}
     * @memberof Segment
     */
    version?: number;
}
/**
 *
 * @export
 * @interface Serve
 */
export interface Serve {
    /**
     *
     * @type {Distribution}
     * @memberof Serve
     */
    distribution?: Distribution;
    /**
     *
     * @type {string}
     * @memberof Serve
     */
    variation?: string;
}
/**
 *
 * @export
 * @interface ServingRule
 */
export interface ServingRule {
    /**
     *
     * @type {string}
     * @memberof ServingRule
     */
    ruleId: string;
    /**
     *
     * @type {number}
     * @memberof ServingRule
     */
    priority: number;
    /**
     *
     * @type {Array<Clause>}
     * @memberof ServingRule
     */
    clauses: Array<Clause>;
    /**
     *
     * @type {Serve}
     * @memberof ServingRule
     */
    serve: Serve;
}
/**
 * A name and value pair.
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    value?: string;
}
/**
 *
 * @export
 * @interface Target
 */
export interface Target {
    /**
     *
     * @type {string}
     * @memberof Target
     */
    identifier: string;
    /**
     *
     * @type {string}
     * @memberof Target
     */
    account: string;
    /**
     *
     * @type {string}
     * @memberof Target
     */
    org: string;
    /**
     *
     * @type {string}
     * @memberof Target
     */
    environment: string;
    /**
     *
     * @type {string}
     * @memberof Target
     */
    project: string;
    /**
     *
     * @type {string}
     * @memberof Target
     */
    name: string;
    /**
     *
     * @type {boolean}
     * @memberof Target
     */
    anonymous?: boolean;
    /**
     *
     * @type {object}
     * @memberof Target
     */
    attributes?: object;
    /**
     *
     * @type {number}
     * @memberof Target
     */
    createdAt?: number;
    /**
     *
     * @type {Array<Segment>}
     * @memberof Target
     */
    segments?: Array<Segment>;
}
/**
 *
 * @export
 * @interface TargetData
 */
export interface TargetData {
    /**
     *
     * @type {string}
     * @memberof TargetData
     */
    identifier: string;
    /**
     *
     * @type {string}
     * @memberof TargetData
     */
    name: string;
    /**
     *
     * @type {Array<KeyValue>}
     * @memberof TargetData
     */
    attributes: Array<KeyValue>;
}
/**
 *
 * @export
 * @interface TargetMap
 */
export interface TargetMap {
    /**
     *
     * @type {string}
     * @memberof TargetMap
     */
    identifier?: string;
    /**
     *
     * @type {string}
     * @memberof TargetMap
     */
    name: string;
}
/**
 *
 * @export
 * @interface Variation
 */
export interface Variation {
    /**
     *
     * @type {string}
     * @memberof Variation
     */
    identifier: string;
    /**
     *
     * @type {string}
     * @memberof Variation
     */
    value: string;
    /**
     *
     * @type {string}
     * @memberof Variation
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Variation
     */
    description?: string;
}
/**
 *
 * @export
 * @interface VariationMap
 */
export interface VariationMap {
    /**
     *
     * @type {string}
     * @memberof VariationMap
     */
    variation: string;
    /**
     *
     * @type {Array<TargetMap>}
     * @memberof VariationMap
     */
    targets?: Array<TargetMap>;
    /**
     *
     * @type {Array<string>}
     * @memberof VariationMap
     */
    targetSegments?: Array<string>;
}
/**
 *
 * @export
 * @interface WeightedVariation
 */
export interface WeightedVariation {
    /**
     *
     * @type {string}
     * @memberof WeightedVariation
     */
    variation: string;
    /**
     *
     * @type {number}
     * @memberof WeightedVariation
     */
    weight: number;
}
/**
 * ClientApi - axios parameter creator
 * @export
 */
export declare const ClientApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Used to retrieve all target segments for certain account id.
     * @summary Authenticate with the admin server.
     * @param {AuthenticationRequest} [authenticationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticate: (authenticationRequest?: AuthenticationRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Used to retrieve all segments for certain account id.
     * @summary Retrieve all segments.
     * @param {string} environmentUUID Unique identifier for the environment object in the API.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllSegments: (environmentUUID: string, cluster?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get feature evaluations for target
     * @param {string} environmentUUID Unique identifier for the environment object in the API.
     * @param {string} feature Unique identifier for the flag object in the API.
     * @param {string} target Unique identifier for the target object in the API.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvaluationByIdentifier: (environmentUUID: string, feature: string, target: string, cluster?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get feature evaluations for target
     * @param {string} environmentUUID Unique identifier for the environment object in the API.
     * @param {string} target Unique identifier for the target object in the API.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvaluations: (environmentUUID: string, target: string, cluster?: string, options?: any) => Promise<RequestArgs>;
    /**
     * All feature flags with activations in project environment
     * @summary Get all feature flags activations
     * @param {string} environmentUUID Unique identifier for the environment object in the API.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureConfig: (environmentUUID: string, cluster?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get feature config
     * @param {string} identifier Unique identifier for the flag object in the API.
     * @param {string} environmentUUID Unique identifier for the environment object in the API.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureConfigByIdentifier: (identifier: string, environmentUUID: string, cluster?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Used to retrieve a segment for a certain account id by identifier
     * @summary Retrieve a segment by identifier
     * @param {string} identifier Unique identifier for the segment object in the API
     * @param {string} environmentUUID Unique identifier for the environment object in the API
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSegmentByIdentifier: (identifier: string, environmentUUID: string, cluster?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Stream endpoint.
     * @param {string} aPIKey
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stream: (aPIKey: string, cluster?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ClientApi - functional programming interface
 * @export
 */
export declare const ClientApiFp: (configuration?: Configuration) => {
    /**
     * Used to retrieve all target segments for certain account id.
     * @summary Authenticate with the admin server.
     * @param {AuthenticationRequest} [authenticationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticate(authenticationRequest?: AuthenticationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationResponse>>;
    /**
     * Used to retrieve all segments for certain account id.
     * @summary Retrieve all segments.
     * @param {string} environmentUUID Unique identifier for the environment object in the API.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllSegments(environmentUUID: string, cluster?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Segment>>>;
    /**
     *
     * @summary Get feature evaluations for target
     * @param {string} environmentUUID Unique identifier for the environment object in the API.
     * @param {string} feature Unique identifier for the flag object in the API.
     * @param {string} target Unique identifier for the target object in the API.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvaluationByIdentifier(environmentUUID: string, feature: string, target: string, cluster?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Evaluation>>;
    /**
     *
     * @summary Get feature evaluations for target
     * @param {string} environmentUUID Unique identifier for the environment object in the API.
     * @param {string} target Unique identifier for the target object in the API.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvaluations(environmentUUID: string, target: string, cluster?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pagination & object>>;
    /**
     * All feature flags with activations in project environment
     * @summary Get all feature flags activations
     * @param {string} environmentUUID Unique identifier for the environment object in the API.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureConfig(environmentUUID: string, cluster?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FeatureConfig>>>;
    /**
     *
     * @summary Get feature config
     * @param {string} identifier Unique identifier for the flag object in the API.
     * @param {string} environmentUUID Unique identifier for the environment object in the API.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureConfigByIdentifier(identifier: string, environmentUUID: string, cluster?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureConfig>>;
    /**
     * Used to retrieve a segment for a certain account id by identifier
     * @summary Retrieve a segment by identifier
     * @param {string} identifier Unique identifier for the segment object in the API
     * @param {string} environmentUUID Unique identifier for the environment object in the API
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSegmentByIdentifier(identifier: string, environmentUUID: string, cluster?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Segment>>;
    /**
     *
     * @summary Stream endpoint.
     * @param {string} aPIKey
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stream(aPIKey: string, cluster?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ClientApi - factory interface
 * @export
 */
export declare const ClientApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Used to retrieve all target segments for certain account id.
     * @summary Authenticate with the admin server.
     * @param {AuthenticationRequest} [authenticationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticate(authenticationRequest?: AuthenticationRequest, options?: any): AxiosPromise<AuthenticationResponse>;
    /**
     * Used to retrieve all segments for certain account id.
     * @summary Retrieve all segments.
     * @param {string} environmentUUID Unique identifier for the environment object in the API.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllSegments(environmentUUID: string, cluster?: string, options?: any): AxiosPromise<Array<Segment>>;
    /**
     *
     * @summary Get feature evaluations for target
     * @param {string} environmentUUID Unique identifier for the environment object in the API.
     * @param {string} feature Unique identifier for the flag object in the API.
     * @param {string} target Unique identifier for the target object in the API.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvaluationByIdentifier(environmentUUID: string, feature: string, target: string, cluster?: string, options?: any): AxiosPromise<Evaluation>;
    /**
     *
     * @summary Get feature evaluations for target
     * @param {string} environmentUUID Unique identifier for the environment object in the API.
     * @param {string} target Unique identifier for the target object in the API.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvaluations(environmentUUID: string, target: string, cluster?: string, options?: any): AxiosPromise<Pagination & object>;
    /**
     * All feature flags with activations in project environment
     * @summary Get all feature flags activations
     * @param {string} environmentUUID Unique identifier for the environment object in the API.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureConfig(environmentUUID: string, cluster?: string, options?: any): AxiosPromise<Array<FeatureConfig>>;
    /**
     *
     * @summary Get feature config
     * @param {string} identifier Unique identifier for the flag object in the API.
     * @param {string} environmentUUID Unique identifier for the environment object in the API.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureConfigByIdentifier(identifier: string, environmentUUID: string, cluster?: string, options?: any): AxiosPromise<FeatureConfig>;
    /**
     * Used to retrieve a segment for a certain account id by identifier
     * @summary Retrieve a segment by identifier
     * @param {string} identifier Unique identifier for the segment object in the API
     * @param {string} environmentUUID Unique identifier for the environment object in the API
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSegmentByIdentifier(identifier: string, environmentUUID: string, cluster?: string, options?: any): AxiosPromise<Segment>;
    /**
     *
     * @summary Stream endpoint.
     * @param {string} aPIKey
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stream(aPIKey: string, cluster?: string, options?: any): AxiosPromise<void>;
};
/**
 * ClientApi - object-oriented interface
 * @export
 * @class ClientApi
 * @extends {BaseAPI}
 */
export declare class ClientApi extends BaseAPI {
    /**
     * Used to retrieve all target segments for certain account id.
     * @summary Authenticate with the admin server.
     * @param {AuthenticationRequest} [authenticationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    authenticate(authenticationRequest?: AuthenticationRequest, options?: any): Promise<import("axios").AxiosResponse<AuthenticationResponse>>;
    /**
     * Used to retrieve all segments for certain account id.
     * @summary Retrieve all segments.
     * @param {string} environmentUUID Unique identifier for the environment object in the API.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    getAllSegments(environmentUUID: string, cluster?: string, options?: any): Promise<import("axios").AxiosResponse<Segment[]>>;
    /**
     *
     * @summary Get feature evaluations for target
     * @param {string} environmentUUID Unique identifier for the environment object in the API.
     * @param {string} feature Unique identifier for the flag object in the API.
     * @param {string} target Unique identifier for the target object in the API.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    getEvaluationByIdentifier(environmentUUID: string, feature: string, target: string, cluster?: string, options?: any): Promise<import("axios").AxiosResponse<Evaluation>>;
    /**
     *
     * @summary Get feature evaluations for target
     * @param {string} environmentUUID Unique identifier for the environment object in the API.
     * @param {string} target Unique identifier for the target object in the API.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    getEvaluations(environmentUUID: string, target: string, cluster?: string, options?: any): Promise<import("axios").AxiosResponse<Pagination & object>>;
    /**
     * All feature flags with activations in project environment
     * @summary Get all feature flags activations
     * @param {string} environmentUUID Unique identifier for the environment object in the API.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    getFeatureConfig(environmentUUID: string, cluster?: string, options?: any): Promise<import("axios").AxiosResponse<FeatureConfig[]>>;
    /**
     *
     * @summary Get feature config
     * @param {string} identifier Unique identifier for the flag object in the API.
     * @param {string} environmentUUID Unique identifier for the environment object in the API.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    getFeatureConfigByIdentifier(identifier: string, environmentUUID: string, cluster?: string, options?: any): Promise<import("axios").AxiosResponse<FeatureConfig>>;
    /**
     * Used to retrieve a segment for a certain account id by identifier
     * @summary Retrieve a segment by identifier
     * @param {string} identifier Unique identifier for the segment object in the API
     * @param {string} environmentUUID Unique identifier for the environment object in the API
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    getSegmentByIdentifier(identifier: string, environmentUUID: string, cluster?: string, options?: any): Promise<import("axios").AxiosResponse<Segment>>;
    /**
     *
     * @summary Stream endpoint.
     * @param {string} aPIKey
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    stream(aPIKey: string, cluster?: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
/**
 * MetricsApi - axios parameter creator
 * @export
 */
export declare const MetricsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Send metrics to Analytics server
     * @summary Send metrics to the Analytics server.
     * @param {string} environment environment parameter in query.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {Metrics} [metrics]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMetrics: (environment: string, cluster?: string, metrics?: Metrics, options?: any) => Promise<RequestArgs>;
};
/**
 * MetricsApi - functional programming interface
 * @export
 */
export declare const MetricsApiFp: (configuration?: Configuration) => {
    /**
     * Send metrics to Analytics server
     * @summary Send metrics to the Analytics server.
     * @param {string} environment environment parameter in query.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {Metrics} [metrics]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMetrics(environment: string, cluster?: string, metrics?: Metrics, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * MetricsApi - factory interface
 * @export
 */
export declare const MetricsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Send metrics to Analytics server
     * @summary Send metrics to the Analytics server.
     * @param {string} environment environment parameter in query.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {Metrics} [metrics]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMetrics(environment: string, cluster?: string, metrics?: Metrics, options?: any): AxiosPromise<void>;
};
/**
 * MetricsApi - object-oriented interface
 * @export
 * @class MetricsApi
 * @extends {BaseAPI}
 */
export declare class MetricsApi extends BaseAPI {
    /**
     * Send metrics to Analytics server
     * @summary Send metrics to the Analytics server.
     * @param {string} environment environment parameter in query.
     * @param {string} [cluster] Unique identifier for the cluster for the account
     * @param {Metrics} [metrics]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    postMetrics(environment: string, cluster?: string, metrics?: Metrics, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
