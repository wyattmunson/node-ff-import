import Client, { Event } from './client';
import LRU from 'lru-cache';
import { Options, Target } from './types';
import { Logger } from './log';
import { AsyncKeyValueStore, KeyValueStore } from './types';
import { FileStore } from './store';
export { Client, Event, Options, Target, AsyncKeyValueStore, KeyValueStore, Logger, LRU, FileStore, };
declare const _default: {
    instance: any;
    init: (sdkKey: string, options: Options) => void;
    waitForInitialization: () => Promise<Client>;
    boolVariation: (identifier: string, target: Target, defaultValue?: boolean) => Promise<boolean>;
    stringVariation: (identifier: string, target: Target, defaultValue?: string) => Promise<string>;
    numberVariation: (identifier: string, target: Target, defaultValue?: number) => Promise<number>;
    jsonVariation: (identifier: string, target: Target, defaultValue?: string) => Promise<Record<string, unknown>>;
    on: (event: Event, callback: (...args: unknown[]) => void) => void;
    off: (event?: Event, callback?: () => void) => void;
    close: () => void;
};
export default _default;
