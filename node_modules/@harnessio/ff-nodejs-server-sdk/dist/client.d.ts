import { Options, Target } from './types';
export declare enum Event {
    READY = "ready",
    FAILED = "failed",
    CHANGED = "changed"
}
export default class Client {
    private evaluator;
    private repository;
    private api;
    private sdkKey;
    private log;
    private authToken;
    private environment;
    private configuration;
    private options;
    private cluster;
    private eventBus;
    private pollProcessor;
    private streamProcessor;
    private metricsProcessor;
    private initialized;
    private failure;
    private waitForInitialize;
    private pollerReady;
    private streamReady;
    private metricReady;
    private closing;
    constructor(sdkKey: string, options?: Options);
    private processEvents;
    on(event: Event, callback: (...args: unknown[]) => void): void;
    off(event?: string, callback?: () => void): void;
    private authenticate;
    waitForInitialization(): Promise<Client>;
    private initialize;
    private run;
    boolVariation(identifier: string, target: Target, defaultValue?: boolean): Promise<boolean>;
    stringVariation(identifier: string, target: Target, defaultValue?: string): Promise<string>;
    numberVariation(identifier: string, target: Target, defaultValue?: number): Promise<number>;
    jsonVariation(identifier: string, target: Target, defaultValue?: {}): Promise<Record<string, unknown>>;
    close(): void;
}
