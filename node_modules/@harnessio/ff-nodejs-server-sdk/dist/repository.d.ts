/// <reference types="node" />
import EventEmitter from 'events';
import { FeatureConfig, Segment } from './openapi';
import { AsyncKeyValueStore, KeyValueStore, Query } from './types';
export interface Repository extends Query {
    setFlag(identifier: string, fc: FeatureConfig): Promise<void>;
    setSegment(identifier: string, segment: Segment): Promise<void>;
    deleteFlag(identifier: string): Promise<void>;
    deleteSegment(identifier: string): Promise<void>;
}
export declare enum RepositoryEvent {
    FLAG_STORED = "flag_stored",
    FLAG_DELETED = "flag_deleted",
    SEGMENT_STORED = "segment_stored",
    SEGMENT_DELETED = "segment_deleted"
}
export declare class StorageRepository implements Repository {
    private cache;
    private store;
    private eventBus;
    constructor(cache: KeyValueStore, store?: AsyncKeyValueStore, eventBus?: EventEmitter);
    setFlag(identifier: string, fc: FeatureConfig): Promise<void>;
    setSegment(identifier: string, segment: Segment): Promise<void>;
    deleteFlag(identifier: string): Promise<void>;
    deleteSegment(identifier: string): Promise<void>;
    getFlag(identifier: string, cacheable?: boolean): Promise<FeatureConfig>;
    getSegment(identifier: string, cacheable?: boolean): Promise<Segment>;
    findFlagsBySegment(segment: string): Promise<string[]>;
    private isFlagOutdated;
    private isSegmentOutdated;
    private formatFlagKey;
    private formatSegmentKey;
}
